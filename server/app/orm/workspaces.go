// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Workspace is an object representing the database table.
type Workspace struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name             string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	NotificationType int         `boil:"notification_type" json:"notification_type" toml:"notification_type" yaml:"notification_type"`
	NotificationID   null.Int64  `boil:"notification_id" json:"notification_id,omitempty" toml:"notification_id" yaml:"notification_id,omitempty"`
	Description      null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *workspaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workspaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkspaceColumns = struct {
	ID               string
	Name             string
	NotificationType string
	NotificationID   string
	Description      string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	Name:             "name",
	NotificationType: "notification_type",
	NotificationID:   "notification_id",
	Description:      "description",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// WorkspaceRels is where relationship names are stored.
var WorkspaceRels = struct {
	Notification     string
	MenuItems        string
	PostPostComments string
	PostTemplates    string
	Posts            string
}{
	Notification:     "Notification",
	MenuItems:        "MenuItems",
	PostPostComments: "PostPostComments",
	PostTemplates:    "PostTemplates",
	Posts:            "Posts",
}

// workspaceR is where relationships are stored.
type workspaceR struct {
	Notification     *Notification
	MenuItems        MenuItemSlice
	PostPostComments PostCommentSlice
	PostTemplates    PostTemplateSlice
	Posts            PostSlice
}

// NewStruct creates a new relationship struct
func (*workspaceR) NewStruct() *workspaceR {
	return &workspaceR{}
}

// workspaceL is where Load methods for each relationship are stored.
type workspaceL struct{}

var (
	workspaceColumns               = []string{"id", "name", "notification_type", "notification_id", "description", "created_at", "updated_at"}
	workspaceColumnsWithoutDefault = []string{"name", "notification_id", "description", "created_at", "updated_at"}
	workspaceColumnsWithDefault    = []string{"id", "notification_type"}
	workspacePrimaryKeyColumns     = []string{"id"}
)

type (
	// WorkspaceSlice is an alias for a slice of pointers to Workspace.
	// This should generally be used opposed to []Workspace.
	WorkspaceSlice []*Workspace
	// WorkspaceHook is the signature for custom Workspace hook methods
	WorkspaceHook func(context.Context, boil.ContextExecutor, *Workspace) error

	workspaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workspaceType                 = reflect.TypeOf(&Workspace{})
	workspaceMapping              = queries.MakeStructMapping(workspaceType)
	workspacePrimaryKeyMapping, _ = queries.BindMapping(workspaceType, workspaceMapping, workspacePrimaryKeyColumns)
	workspaceInsertCacheMut       sync.RWMutex
	workspaceInsertCache          = make(map[string]insertCache)
	workspaceUpdateCacheMut       sync.RWMutex
	workspaceUpdateCache          = make(map[string]updateCache)
	workspaceUpsertCacheMut       sync.RWMutex
	workspaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var workspaceBeforeInsertHooks []WorkspaceHook
var workspaceBeforeUpdateHooks []WorkspaceHook
var workspaceBeforeDeleteHooks []WorkspaceHook
var workspaceBeforeUpsertHooks []WorkspaceHook

var workspaceAfterInsertHooks []WorkspaceHook
var workspaceAfterSelectHooks []WorkspaceHook
var workspaceAfterUpdateHooks []WorkspaceHook
var workspaceAfterDeleteHooks []WorkspaceHook
var workspaceAfterUpsertHooks []WorkspaceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Workspace) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Workspace) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Workspace) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Workspace) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Workspace) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Workspace) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Workspace) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Workspace) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Workspace) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range workspaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkspaceHook registers your hook function for all future operations.
func AddWorkspaceHook(hookPoint boil.HookPoint, workspaceHook WorkspaceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workspaceBeforeInsertHooks = append(workspaceBeforeInsertHooks, workspaceHook)
	case boil.BeforeUpdateHook:
		workspaceBeforeUpdateHooks = append(workspaceBeforeUpdateHooks, workspaceHook)
	case boil.BeforeDeleteHook:
		workspaceBeforeDeleteHooks = append(workspaceBeforeDeleteHooks, workspaceHook)
	case boil.BeforeUpsertHook:
		workspaceBeforeUpsertHooks = append(workspaceBeforeUpsertHooks, workspaceHook)
	case boil.AfterInsertHook:
		workspaceAfterInsertHooks = append(workspaceAfterInsertHooks, workspaceHook)
	case boil.AfterSelectHook:
		workspaceAfterSelectHooks = append(workspaceAfterSelectHooks, workspaceHook)
	case boil.AfterUpdateHook:
		workspaceAfterUpdateHooks = append(workspaceAfterUpdateHooks, workspaceHook)
	case boil.AfterDeleteHook:
		workspaceAfterDeleteHooks = append(workspaceAfterDeleteHooks, workspaceHook)
	case boil.AfterUpsertHook:
		workspaceAfterUpsertHooks = append(workspaceAfterUpsertHooks, workspaceHook)
	}
}

// One returns a single workspace record from the query.
func (q workspaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Workspace, error) {
	o := &Workspace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for workspaces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Workspace records from the query.
func (q workspaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkspaceSlice, error) {
	var o []*Workspace

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Workspace slice")
	}

	if len(workspaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Workspace records in the query.
func (q workspaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count workspaces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workspaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if workspaces exists")
	}

	return count > 0, nil
}

// Notification pointed to by the foreign key.
func (o *Workspace) Notification(mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.NotificationID),
	}

	queryMods = append(queryMods, mods...)

	query := Notifications(queryMods...)
	queries.SetFrom(query.Query, "\"notifications\"")

	return query
}

// MenuItems retrieves all the menu_item's MenuItems with an executor.
func (o *Workspace) MenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"workspace_id\"=?", o.ID),
	)

	query := MenuItems(queryMods...)
	queries.SetFrom(query.Query, "\"menu_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"menu_items\".*"})
	}

	return query
}

// PostPostComments retrieves all the post_comment's PostComments with an executor via post_id column.
func (o *Workspace) PostPostComments(mods ...qm.QueryMod) postCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"post_comments\".\"post_id\"=?", o.ID),
	)

	query := PostComments(queryMods...)
	queries.SetFrom(query.Query, "\"post_comments\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"post_comments\".*"})
	}

	return query
}

// PostTemplates retrieves all the post_template's PostTemplates with an executor.
func (o *Workspace) PostTemplates(mods ...qm.QueryMod) postTemplateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"post_templates\".\"workspace_id\"=?", o.ID),
	)

	query := PostTemplates(queryMods...)
	queries.SetFrom(query.Query, "\"post_templates\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"post_templates\".*"})
	}

	return query
}

// Posts retrieves all the post's Posts with an executor.
func (o *Workspace) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"workspace_id\"=?", o.ID),
	)

	query := Posts(queryMods...)
	queries.SetFrom(query.Query, "\"posts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"posts\".*"})
	}

	return query
}

// LoadNotification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workspaceL) LoadNotification(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.NotificationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NotificationID) {
					continue Outer
				}
			}

			args = append(args, obj.NotificationID)
		}
	}

	query := NewQuery(qm.From(`notifications`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notification")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notifications")
	}

	if len(workspaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Notification = foreign
		if foreign.R == nil {
			foreign.R = &notificationR{}
		}
		foreign.R.Workspaces = append(foreign.R.Workspaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NotificationID, foreign.ID) {
				local.R.Notification = foreign
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.Workspaces = append(foreign.R.Workspaces, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadMenuItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`menu_items`), qm.WhereIn(`workspace_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.MenuItems = append(local.R.MenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// LoadPostPostComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadPostPostComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`post_comments`), qm.WhereIn(`post_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post_comments")
	}

	var resultSlice []*PostComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_comments")
	}

	if len(postCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PostPostComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postCommentR{}
			}
			foreign.R.Post = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PostID {
				local.R.PostPostComments = append(local.R.PostPostComments, foreign)
				if foreign.R == nil {
					foreign.R = &postCommentR{}
				}
				foreign.R.Post = local
				break
			}
		}
	}

	return nil
}

// LoadPostTemplates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadPostTemplates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`post_templates`), qm.WhereIn(`workspace_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post_templates")
	}

	var resultSlice []*PostTemplate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post_templates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post_templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_templates")
	}

	if len(postTemplateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PostTemplates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postTemplateR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.PostTemplates = append(local.R.PostTemplates, foreign)
				if foreign.R == nil {
					foreign.R = &postTemplateR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`posts`), qm.WhereIn(`workspace_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// SetNotification of the workspace to the related item.
// Sets o.R.Notification to related.
// Adds o to related.R.Workspaces.
func (o *Workspace) SetNotification(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Notification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"workspaces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notification_id"}),
		strmangle.WhereClause("\"", "\"", 2, workspacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NotificationID, related.ID)
	if o.R == nil {
		o.R = &workspaceR{
			Notification: related,
		}
	} else {
		o.R.Notification = related
	}

	if related.R == nil {
		related.R = &notificationR{
			Workspaces: WorkspaceSlice{o},
		}
	} else {
		related.R.Workspaces = append(related.R.Workspaces, o)
	}

	return nil
}

// RemoveNotification relationship.
// Sets o.R.Notification to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Workspace) RemoveNotification(ctx context.Context, exec boil.ContextExecutor, related *Notification) error {
	var err error

	queries.SetScanner(&o.NotificationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("notification_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Notification = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Workspaces {
		if queries.Equal(o.NotificationID, ri.NotificationID) {
			continue
		}

		ln := len(related.R.Workspaces)
		if ln > 1 && i < ln-1 {
			related.R.Workspaces[i] = related.R.Workspaces[ln-1]
		}
		related.R.Workspaces = related.R.Workspaces[:ln-1]
		break
	}
	return nil
}

// AddMenuItems adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.MenuItems.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"workspace_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			MenuItems: related,
		}
	} else {
		o.R.MenuItems = append(o.R.MenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// AddPostPostComments adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.PostPostComments.
// Sets related.R.Post appropriately.
func (o *Workspace) AddPostPostComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PostID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"post_comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"post_id"}),
				strmangle.WhereClause("\"", "\"", 2, postCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PostID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			PostPostComments: related,
		}
	} else {
		o.R.PostPostComments = append(o.R.PostPostComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postCommentR{
				Post: o,
			}
		} else {
			rel.R.Post = o
		}
	}
	return nil
}

// AddPostTemplates adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.PostTemplates.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddPostTemplates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostTemplate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"post_templates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"workspace_id"}),
				strmangle.WhereClause("\"", "\"", 2, postTemplatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			PostTemplates: related,
		}
	} else {
		o.R.PostTemplates = append(o.R.PostTemplates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postTemplateR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// AddPosts adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"workspace_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// Workspaces retrieves all the records using an executor.
func Workspaces(mods ...qm.QueryMod) workspaceQuery {
	mods = append(mods, qm.From("\"workspaces\""))
	return workspaceQuery{NewQuery(mods...)}
}

// FindWorkspace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkspace(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Workspace, error) {
	workspaceObj := &Workspace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"workspaces\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workspaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from workspaces")
	}

	return workspaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Workspace) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no workspaces provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workspaceInsertCacheMut.RLock()
	cache, cached := workspaceInsertCache[key]
	workspaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workspaceColumns,
			workspaceColumnsWithDefault,
			workspaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workspaceType, workspaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"workspaces\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"workspaces\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into workspaces")
	}

	if !cached {
		workspaceInsertCacheMut.Lock()
		workspaceInsertCache[key] = cache
		workspaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Workspace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Workspace) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workspaceUpdateCacheMut.RLock()
	cache, cached := workspaceUpdateCache[key]
	workspaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workspaceColumns,
			workspacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update workspaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"workspaces\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, workspacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, append(wl, workspacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update workspaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for workspaces")
	}

	if !cached {
		workspaceUpdateCacheMut.Lock()
		workspaceUpdateCache[key] = cache
		workspaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workspaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for workspaces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkspaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"workspaces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, workspacePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in workspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all workspace")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Workspace) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no workspaces provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workspaceUpsertCacheMut.RLock()
	cache, cached := workspaceUpsertCache[key]
	workspaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workspaceColumns,
			workspaceColumnsWithDefault,
			workspaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workspaceColumns,
			workspacePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("orm: unable to upsert workspaces, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(workspacePrimaryKeyColumns))
			copy(conflict, workspacePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"workspaces\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workspaceType, workspaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert workspaces")
	}

	if !cached {
		workspaceUpsertCacheMut.Lock()
		workspaceUpsertCache[key] = cache
		workspaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Workspace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Workspace) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Workspace provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workspacePrimaryKeyMapping)
	sql := "DELETE FROM \"workspaces\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for workspaces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workspaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no workspaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for workspaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkspaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Workspace slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(workspaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"workspaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workspacePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from workspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for workspaces")
	}

	if len(workspaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Workspace) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkspace(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkspaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkspaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"workspaces\".* FROM \"workspaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, workspacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in WorkspaceSlice")
	}

	*o = slice

	return nil
}

// WorkspaceExists checks if the Workspace row exists.
func WorkspaceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"workspaces\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if workspaces exists")
	}

	return exists, nil
}
